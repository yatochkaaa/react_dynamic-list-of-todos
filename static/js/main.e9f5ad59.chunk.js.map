{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","props","todos","selectUser","className","map","todo","classNames","completed","type","checked","title","onClick","userId","id","request","url","fetch","then","response","ok","Error","status","statusText","json","CurrentUser","state","user","isUserLoaded","this","loadData","prevProps","selectedUserId","a","setState","clearSelectedUser","name","email","phone","React","Component","App","search","handleChange","event","target","value","prevState","todosFilter","filteredTodos","filter","includes","onChange","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e9f5ad59.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/types';\n\ninterface Props {\n  todos: Todo[];\n  selectUser: (userId: number) => void;\n}\n\nexport const TodoList: React.FC<Props> = (props) => {\n  const { todos, selectUser } = props;\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {todos.map(todo => (\n            <li\n              key={todo.id}\n              className={classNames(\n                'TodoList__item',\n                {\n                  'TodoList__item--checked': todo.completed,\n                  'TodoList__item--unchecked': !todo.completed,\n                },\n              )}\n            >\n              <label>\n                <input type=\"checkbox\" checked={todo.completed} />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className={classNames(\n                  'TodoList__user-button',\n                  'button',\n                  { 'TodoList__user-button--selected': !todo.completed },\n                )}\n                type=\"button\"\n                onClick={() => selectUser(todo.userId)}\n              >\n                {`User #${todo.userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\nconst request = (url: string) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n\nexport const getUsers = () => {\n  return request('/users');\n};\n\nexport const getUser = (id: number) => {\n  return request(`/users/${id}`);\n};\n\nexport const getTodos = () => {\n  return request('/todos');\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api/api';\nimport { User } from '../../types/types';\n\ninterface Props {\n  selectedUserId: number;\n  clearSelectedUser: () => void;\n}\n\ninterface State {\n  user: User | null;\n  isUserLoaded: boolean;\n}\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n    isUserLoaded: false,\n  };\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.selectedUserId !== this.props.selectedUserId) {\n      this.loadData();\n    }\n  }\n\n  async loadData() {\n    try {\n      const user = await getUser(this.props.selectedUserId);\n\n      this.setState({\n        user,\n        isUserLoaded: true,\n      });\n    } catch (error) {\n      this.setState({ isUserLoaded: false });\n    }\n  }\n\n  render() {\n    const { user, isUserLoaded } = this.state;\n    const { clearSelectedUser } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        {user && isUserLoaded ? (\n          <>\n            <h2 className=\"CurrentUser__title\">\n              <span>{`Selected user: ${user.id}`}</span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">{user.name}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={clearSelectedUser}\n            >\n              Clear\n            </button>\n          </>\n        ) : 'User is not found'}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\nimport { Todo } from './types/types';\n\ninterface State {\n  todos: Todo[];\n  selectedUserId: number;\n  search: string,\n  status: string,\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    todos: [],\n    selectedUserId: 0,\n    search: '',\n    status: 'all',\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({ todos });\n  }\n\n  selectUser = (userId: number) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  clearSelectedUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  };\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const { name, value } = event.target;\n\n    this.setState(prevState => ({\n      ...prevState,\n      [name]: value,\n    }));\n  };\n\n  todosFilter = () => {\n    const { todos, status, search } = this.state;\n\n    let filteredTodos = todos.filter(todo => todo.title.includes(search));\n\n    if (status === 'active') {\n      filteredTodos = filteredTodos.filter(todo => !todo.completed);\n    }\n\n    if (status === 'completed') {\n      filteredTodos = filteredTodos.filter(todo => todo.completed);\n    }\n\n    return filteredTodos;\n  };\n\n  render() {\n    const { selectedUserId, search } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <input\n            type=\"text\"\n            name=\"search\"\n            value={search}\n            onChange={this.handleChange}\n          />\n\n          <select\n            name=\"status\"\n            onChange={this.handleChange}\n          >\n            <option value=\"all\">\n              All\n            </option>\n\n            <option value=\"active\">\n              Active\n            </option>\n\n            <option value=\"completed\">\n              Completed\n            </option>\n          </select>\n\n          <TodoList\n            todos={this.todosFilter()}\n            selectUser={this.selectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                selectedUserId={selectedUserId}\n                clearSelectedUser={this.clearSelectedUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}