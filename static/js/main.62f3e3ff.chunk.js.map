{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","props","todos","selectUser","className","map","todo","classNames","completed","type","checked","title","onClick","userId","id","request","url","fetch","then","response","ok","Error","status","statusText","json","CurrentUser","state","user","this","loadData","prevProps","selectedUserId","a","setState","clearSelectedUser","name","email","phone","React","Component","App","ReactDOM","render","document","getElementById"],"mappings":"+WAWaA,EAA4B,SAACC,GACxC,IAAQC,EAAsBD,EAAtBC,MAAOC,EAAeF,EAAfE,WAEf,OACE,sBAAKC,UAAU,WAAf,UACE,wCAEA,qBAAKA,UAAU,2BAAf,SACE,oBAAIA,UAAU,iBAAd,SACGF,EAAMG,KAAI,SAAAC,GAAI,OACb,qBAEEF,UAAWG,IACT,iBACA,CACE,0BAA2BD,EAAKE,UAChC,6BAA8BF,EAAKE,YANzC,UAUE,kCACE,uBAAOC,KAAK,WAAWC,QAASJ,EAAKE,YACrC,4BAAIF,EAAKK,WAGX,wBACEP,UAAWG,IACT,wBACA,SACA,CAAE,mCAAoCD,EAAKE,YAE7CC,KAAK,SACLG,QAAS,kBAAMT,EAAWG,EAAKO,SAPjC,yBASYP,EAAKO,YAvBZP,EAAKQ,eCpBlBC,G,MAAU,SAACC,GACf,OAAOC,MAAM,GAAD,OAHG,qCAGH,OAAeD,IACxBE,MAAK,SAAAC,GACJ,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAJ,UAAaF,EAASG,OAAtB,cAAkCH,EAASI,aAGnD,OAAOJ,EAASK,YCKTC,EAAb,4MACEC,MAAe,CACbC,KAAM,MAFV,uDAKE,WACEC,KAAKC,aANT,gCASE,SAAmBC,GACbA,EAAUC,iBAAmBH,KAAK3B,MAAM8B,gBAC1CH,KAAKC,aAXX,6DAeE,4BAAAG,EAAA,sEDZsBlB,ECaOc,KAAK3B,MAAM8B,eDZjChB,EAAQ,UAAD,OAAWD,ICWzB,OACQa,EADR,OAGEC,KAAKK,SAAS,CAAEN,SAHlB,iCDZqB,IAACb,ICYtB,YAfF,0EAqBE,WACE,IAAQa,EAASC,KAAKF,MAAdC,KACAO,EAAsBN,KAAK3B,MAA3BiC,kBAER,OACE,qBAAK9B,UAAU,cAAf,SACGuB,GACC,qCACE,oBAAIvB,UAAU,qBAAd,SACE,wDAAyBuB,EAAKb,QAGhC,oBAAIV,UAAU,oBAAd,SAAmCuB,EAAKQ,OACxC,mBAAG/B,UAAU,qBAAb,SAAmCuB,EAAKS,QACxC,mBAAGhC,UAAU,qBAAb,SAAmCuB,EAAKU,QAExC,wBACE5B,KAAK,SACLL,UAAU,SACVQ,QAASsB,EAHX,4BArCZ,GAAiCI,IAAMC,WCDjCC,E,4MACJd,MAAe,CACbxB,MAAO,GACP6B,eAAgB,G,EASlB5B,WAAa,SAACU,GACZ,EAAKoB,SAAS,CAAEF,eAAgBlB,K,EAGlCqB,kBAAoB,WAClB,EAAKD,SAAS,CACZF,eAAgB,K,8FAZpB,4BAAAC,EAAA,sEFGOjB,EAAQ,UEHf,OACQb,EADR,OAGE0B,KAAKK,SAAS,CAAE/B,UAHlB,gD,0EAgBA,WACE,MAAkC0B,KAAKF,MAA/BxB,EAAR,EAAQA,MAAO6B,EAAf,EAAeA,eAEf,OACE,sBAAK3B,UAAU,MAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CACEF,MAAOA,EACPC,WAAYyB,KAAKzB,eAIrB,qBAAKC,UAAU,eAAf,SACE,qBAAKA,UAAU,yBAAf,SACG2B,EACC,cAAC,EAAD,CACEA,eAAgBA,EAChBG,kBAAmBN,KAAKM,oBAExB,8B,GAzCEI,IAAMC,WAiDTC,IC3DfC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.62f3e3ff.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/types';\n\ninterface Props {\n  todos: Todo[];\n  selectUser: (userId: number) => void;\n}\n\nexport const TodoList: React.FC<Props> = (props) => {\n  const { todos, selectUser } = props;\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {todos.map(todo => (\n            <li\n              key={todo.id}\n              className={classNames(\n                'TodoList__item',\n                {\n                  'TodoList__item--checked': todo.completed,\n                  'TodoList__item--unchecked': !todo.completed,\n                },\n              )}\n            >\n              <label>\n                <input type=\"checkbox\" checked={todo.completed} />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className={classNames(\n                  'TodoList__user-button',\n                  'button',\n                  { 'TodoList__user-button--selected': !todo.completed },\n                )}\n                type=\"button\"\n                onClick={() => selectUser(todo.userId)}\n              >\n                {`User #${todo.userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\nconst request = (url: string) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n\nexport const getUsers = () => {\n  return request('/users');\n};\n\nexport const getUser = (id: number) => {\n  return request(`/users/${id}`);\n};\n\nexport const getTodos = () => {\n  return request('/todos');\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api/api';\nimport { User } from '../../types/types';\n\ninterface Props {\n  selectedUserId: number;\n  clearSelectedUser: () => void;\n}\n\ninterface State {\n  user: User | null;\n}\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.selectedUserId !== this.props.selectedUserId) {\n      this.loadData();\n    }\n  }\n\n  async loadData() {\n    const user = await getUser(this.props.selectedUserId);\n\n    this.setState({ user });\n  }\n\n  render() {\n    const { user } = this.state;\n    const { clearSelectedUser } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        {user && (\n          <>\n            <h2 className=\"CurrentUser__title\">\n              <span>{`Selected user: ${user.id}`}</span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">{user.name}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={clearSelectedUser}\n            >\n              Clear\n            </button>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\nimport { Todo } from './types/types';\n\ninterface State {\n  todos: Todo[];\n  selectedUserId: number;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({ todos });\n  }\n\n  selectUser = (userId: number) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  clearSelectedUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  };\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectUser={this.selectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                selectedUserId={selectedUserId}\n                clearSelectedUser={this.clearSelectedUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}